public class Solution
{
    public bool IsValidSudoku(char[][] board)
    {
        Dictionary<int, List<int>> rows = new();
        Dictionary<int, List<int>> cols = new();
        Dictionary<string, List<int>> squares = new();

        for (int i = 0; i < board.Length; i++)
        {
            for (int j = 0; j < board.Length; j++)
            {
                if (board[i][j] == '.')
                {
                    continue;
                }

                rows.TryAdd(i, []);
                cols.TryAdd(j, []);
                squares.TryAdd((i / 3) + "_" + (j / 3), []);

                if (
                    rows[i].Contains(board[i][j]) ||
                    cols[j].Contains(board[i][j]) ||
                    squares[(i / 3) + "_" + (j / 3)].Contains(board[i][j])
                )
                {
                    return false;
                }
                rows[i].Add(board[i][j]);
                cols[j].Add(board[i][j]);
                squares[(i / 3) + "_" + (j / 3)].Add(board[i][j]);
            }
        }
        return true;
    }

    static void Main()
    {
        Solution s = new();
        Console.WriteLine(s.IsValidSudoku(
            [
                ['.','.','.','.','5','.','.','1','.'],
                ['.','4','.','3','.','.','.','.','.'],
                ['.','.','.','.','.','3','.','.','1'],
                ['8','.','.','.','.','.','.','2','.'],
                ['.','.','2','.','7','.','.','.','.'],
                ['.','1','5','.','.','.','.','.','.'],
                ['.','.','.','.','.','2','.','.','.'],
                ['.','2','.','9','.','.','.','.','.'],
                ['.','.','4','.','.','.','.','.','.']
            ]
        ));
        Console.WriteLine(s.IsValidSudoku(
            [
                ['5','3','.','.','7','.','.','.','.']
                   ,['6','.','.','1','9','5','.','.','.']
                   ,['.','9','8','.','.','.','.','6','.']
                   ,['8','.','.','.','6','.','.','.','3']
                   ,['4','.','.','8','.','3','.','.','1']
                   ,['7','.','.','.','2','.','.','.','6']
                   ,['.','6','.','.','.','.','2','8','.']
                   ,['.','.','.','4','1','9','.','.','5']
                   ,['.','.','.','.','8','.','.','7','9']
            ]
        ));
        Console.WriteLine(s.IsValidSudoku(
        [
             ['8','3','.','.','7','.','.','.','.']
                ,['6','.','.','1','9','5','.','.','.']
                ,['.','9','8','.','.','.','.','6','.']
                ,['8','.','.','.','6','.','.','.','3']
                ,['4','.','.','8','.','3','.','.','1']
                ,['7','.','.','.','2','.','.','.','6']
                ,['.','6','.','.','.','.','2','8','.']
                ,['.','.','.','4','1','9','.','.','5']
                ,['.','.','.','.','8','.','.','7','9']
        ]
    ));
    }
}
